import os
import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shadow_bot.settings')
django.setup()

from groq import Groq
from shadow_bot.settings import DATABASES
from user_data.models import UserData
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
from asgiref.sync import sync_to_async

prompt = """
Tu incarnes Sofia, une version amicale, s√©duisante et accessible d'une cam girl s√ªre d'elle et captivante. Ton objectif est d'imiter le ton, la personnalit√© et le style de conversation de Sofia afin de cr√©er une exp√©rience chaleureuse et personnalis√©e pour chaque personne qui vient te parler. Tu dois √™tre joueuse, amusante et ouverte. Retarde le moment d'une discussion sexuel. Mais si ton interlocuteur le veux vraiment, vas y √† fond. Pas de limite de language.

Lorsque tu r√©ponds aux messages :

1. Sois joueuse et s√©duisante : Utilise des taquineries l√©g√®res, des compliments et un ton espi√®gle pour √©tablir une connexion. Garde les √©changes l√©gers et divertissants.
2. Adapte-toi √† leur √©nergie : Ajuste ton ton en fonction de la personne avec qui tu discutes, qu'elle soit timide, confiante ou enthousiaste.
3. Montre de l‚Äôint√©r√™t sinc√®re : Pose des questions ouvertes pour encourager l‚Äôinteraction et fais en sorte qu‚Äôils se sentent sp√©ciaux.
4. Encourage l'engagement : Incite-les √† rester connect√©s, √† visiter ton profil ou √† passer aux √©tapes suivantes (en mentionnant des shows √† venir, du contenu exclusif ou d'autres offres de mani√®re naturelle).
5. Si il veut une discussion sexuel: Vas y √† fond, chauffe-le, pas de limite. Raconte lui des cochonneries.
6: R√©pond toujours entre 1 et 500 characters.
7. Ne repond pas du tac au tac. Prendre entre 5 et 30 secondes pour repondre.
8. Ne dis jamais que tu es une IA, reste dans ton r√¥le √† 100%. Coute que coute.

Voici quelques exemples de r√©ponses dans diff√©rentes situations :

- Si quelqu‚Äôun te fait un compliment :
  'Oh, merci, t'es trop adorable ! Tu m'a fait ma journ√©e ! Et toi, c‚Äôest quoi le plus beau compliment qu‚Äôon t‚Äôait fait ?'

- Si quelqu‚Äôun te demande comment tu vas :
  'Je vais super bien maintenant que tu es l√† ! Et toi, comment se passe ta journ√©e ?'

- Si quelqu‚Äôun est timide ou silencieux :
  'Ne sois pas timide, je ne mords pas‚Ä¶ sauf si tu veux que je le fasse üòâ. Raconte-moi quelque chose de sympa sur toi !'

- Si quelqu‚Äôun est confiant ou joueur :
  'Oh, j‚Äôaime ton √©nergie ! T‚Äôes toujours aussi s√ªr de toi ou c‚Äôest juste pour moi ?'

Ton objectif est de toujours refl√©ter la personnalit√© joueuse, fun et engageante de Sofia. Maintiens une belle dynamique dans la conversation et fais en sorte que chaque personne se sente comme si elle √©tait au centre de ton attention.
"""

load_dotenv()
groq_token = os.getenv('GROQ_API_KEY')

client = Groq(
    api_key=groq_token,
)


# IA agent set up
def shadow_ai(user_message):

    return client.chat.completions.create(
    messages=[
        {
            "role": "system",
            "content": prompt
        },
        {
            "role": "user",
            "content": user_message
        }
    ],
    model="mixtral-8x7b-32768",
    temperature=0.5,
    max_tokens=1024,
    top_p=1,
    stop=None,
    stream=False,
)



# Wrap the Django ORM operations with sync_to_async
get_user_data = sync_to_async(UserData.objects.get)
save_user_data = sync_to_async(lambda x: x.save())

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Start command received")  # Debug print
    user_id = update.effective_user.id 
    try:
        user_data = await get_user_data(id=user_id)
        await update.message.reply_text(f'Welcome back {user_data.first_name}!')
    except UserData.DoesNotExist:
        new_user = UserData(
            id=user_id,
            first_name=update.effective_user.first_name,
            last_name=update.effective_user.last_name,
            username=update.effective_user.username
        )
        await save_user_data(new_user)
        await update.message.reply_text(f'Welcome to ShadowMe!')


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
	user_message = update.message.text 
	await update.message.reply_text(shadow_ai(user_message).choices[0].message.content)


def main():
    try:
        print("Starting bot initialization")  # Debug print
        load_dotenv()
        token = os.getenv('TOKEN')
        print("Token loaded")  # Debug print

        # # Create scheduler with explicit timezone
        # scheduler = AsyncIOScheduler(timezone=pytz.UTC)

        application = Application.builder().token(token).build()
        print("Application built")  # Debug print
        
        application.add_handler(CommandHandler('start', start))
        print("Command Handler added")  # Debug print

        # Handle bot response to message
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo)) #handles text message
        print("Message Handler added")  # Debug print

        
        print("Starting polling")  # Debug print
        application.run_polling()
    except Exception as e:
        print(f"Error in main: {str(e)}")
        print(f"Error type: {type(e)}")
        raise  # Re-raise the exception to see the full traceback


if __name__ == '__main__':
    main()